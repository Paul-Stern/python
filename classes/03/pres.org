#+HUGO_BASE_DIR: ../../site/
#+HUGO_SECTION: ./reveal/03
#+EXPORT_FILE_NAME: _index.md
#+HUGO_MENU: :reveal_hugo
#+HUGO_CUSTOM_FRONT_MATTER: :outputs "Reveal"

* Занятие №3
Функции

---

Что такое функция?

---

Какие функции мы уже рассматривали?

---

** Понятие

В программировании, функция \mdash это последовательность совершающих вычисление инструкций, имеющая имя.

---


** Вызов функций

#+BEGIN_EXAMPLE
имя_функции(аргумент1, аргумент2, ...)
#+END_EXAMPLE

---

#+BEGIN_SRC python
>>> type(42)
<class 'int'>
#+END_SRC

Имя функции, аргумент, возвращаемое значение (return value)

---

** Математические функции

Подключение модуля:

#+BEGIN_SRC python
>>> import math
#+END_SRC

Инструкция импорта.

Объект-модуль

---

Dot notation (запись с точками):

~math.pi~ и ~math.sqrt()~

---

** Композиция

Аргументом функции может быть любое выражение.

#+BEGIN_SRC python
  print(dir(math))
#+END_SRC

#+BEGIN_SRC python
minutes = hours * 60
#+END_SRC

---

** Создание новых функций

https://docs.python.org/3/reference/compound_stmts.html#function-definitions

#+BEGIN_EXAMPLE
funcdef       ::=  [decorators] "def" funcname "(" [parameter_list] ")"
                   ["->" expression] ":" suite
#+END_EXAMPLE


#+BEGIN_EXAMPLE
Определение функции       ::=  "def" имя_функции "(" [список_аргументов] ")"
                    ":" список инструкций
#+END_EXAMPLE


---

#+BEGIN_SRC python
  def print_something():
      print('Я печатаю некоторый текст')
      print('на двух строчках.')
#+END_SRC

Пустые скобки означают, что функция не принимает аргументов. 

Заголовок и тело функции.

Тело начинается с отступа. Отступ \mdash 4 пробела. Тело может содержать любое количество инструкций.

---

#+BEGIN_SRC python
  >>> print(print_something)
  >>> type(print_something)
#+END_SRC 

---

Вызывать новые функции можно так же, как и встроенные.

---

После определения, новые функции можно использовать в других функциях.

#+BEGIN_SRC python
  def repeat_something():
      print_something()
      print_something()
#+END_SRC

#+BEGIN_SRC python
>>> repeat_something()
#+END_SRC

---

** Определение и использование функций


#+BEGIN_SRC python
def print_something():
    print('Я печатаю некоторый текст')
    print('на двух строчках.')

def repeat_something():
    print_something()
    print_something()

repeat_something()
#+END_SRC


---

Инструкции внутри функции не выполняются до ее вызова. Прежде чем использовать функции, их необходимо создать.

---

** Аргументы и параметры

#+BEGIN_SRC python
  def print_twice(bruce):
      print(bruce)
      print(bruce)
#+END_SRC

---

Переменные и параметры локальны.

#+BEGIN_SRC python
  def cat_twice(part1, part2):
      cat = part1 + part2
      print_twice(cat)
#+END_SRC

---

    
#+BEGIN_SRC python
>>> line1 = 'Bing tiddle '
>>> line2 = 'tiddle bang.'
>>> cat_twice(line1, line2)
#+END_SRC

#+BEGIN_SRC python
>>> print(cat)
#+END_SRC

---

Не все функции возвращают какое-то значение

#+BEGIN_SRC python
>>> result = print_twice('Bing')
Bing
Bing
>>> print(result)
None
#+END_SRC


---

** Задачи

---

** №1

Напишите функцию ~right_justify~, которая принимает строку, названную =s= в качестве аргумента и выводит в консоль строку с достаточным количеством пробелов перед ней, таким образом, что ее последний символ находится в 70-ом столбце дисплея.

Вам может пригодиться функция ~len()~ возвращающая длину параметра.

---

** №2

Предисловие.

Объект функция является значением, которое можно назначать переменной или использовать в качестве аргумента других функций. Например, =do_twice= \mdash это функция, которая принимает объект функцию в качестве аргумента и вызывает ее дважды:

#+BEGIN_SRC python
  def do_twice(f):
      f()
      f()
#+END_SRC

---

Вот пример, который использует функцию =do_twice=, чтобы вызвать функцию под названием =print_spam= дважды:

#+BEGIN_SRC python
  def print_spam():
      print('spam')

  do_twice(print_spam)
#+END_SRC

---

Задание.

1. Запишите этот пример в скрипт и протестируйте его
2. Измените функцию =do_twice= так, чтобы она принимала 2 аргумента: объект-функцию и значение \mdash и вызывала эту функцию дважды, передавая указанное значение в качестве ее аргумента.
3. Скопируйте определение функции =print_twice= из сегодняшнего урока в текущий скрипт.

---

4. [@4]Используйте измененную версию =do_twice=, чтобы вызвать =print_twice= дважды, передавая ей ~'spam'~ в качестве аргумента
5. Определите новую функцию под названием =do_four=, которая принимает объект-функцию и значение в качестве аргументов, и вызывает эту функцию 4 раза с этим значением в качестве аргумента. В теле функции =do_four= должно быть только 2 инструкции, а не 4.


---

** №3

Напишите функцию, рисующую следующую таблицу:

#+BEGIN_EXAMPLE
+ - - - - + - - - - + 
|         |         |
|         |         |
|         |         |
|         |         |
+ - - - - + - - - - + 
|         |         |
|         |         |
|         |         |
|         |         |
+ - - - - + - - - - + 
#+END_EXAMPLE

---

# Задания повышенной сложности:
# 1. Сделайте возможным задавать количество ячеек аргументом =cell_amount= этой функции.
# 2. Сделайте возможным задавать размер ячейки аргументом =cell_size=.
